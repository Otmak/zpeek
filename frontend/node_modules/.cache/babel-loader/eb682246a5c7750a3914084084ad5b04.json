{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/path.js\";\nimport React, { Component } from 'react';\nimport './path.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DateTimePicker from '../datetime/datetime-picker';\n\nclass Path extends Component {\n  constructor(props) {\n    super(props); // this.fetchPathData = this.fetchPathData.bind(this)\n\n    this.state = {\n      data: [],\n      pathexists: true,\n      theId: this.props.data,\n      startDateTime: '',\n      endDateTime: ''\n    };\n  }\n\n  componentDidMount() {}\n\n  getDateTimeValue(e) {\n    // consider getting the timestandp from submit to calculate how long your app takes\n    e.preventDefault();\n    let s = e; // for (let i = 0; i < e.target.length; i++ ) {\n    // \tconsole.log(s[i])\n    // }\n\n    console.log('FROM PAHT UNDER SUBMIT :', e.target); // console.log('FROM PAHT UNDER SUBMIT #2 :', typeof s.target)\n  }\n\n  getDateTime(e) {\n    console.log(e, 'FROM PAth');\n  } // async fetchPathData (params)  {\n  // \tlet start = 1603971032\n  // \tlet end = 1608230858\n  // \tlet dbId = params\n  // \tconsole.log(this)\n  // \tthis.setState({data : []})\n  // \tlet bodyData = {\n  // \t\t'params': {\n  // \t\t\t'stime': start,\n  // \t\t\t'etime': end,\n  // \t\t\t'dbId' : dbId \n  // \t\t\t\t}}\n  // \tconst makeRequest = await fetch('/path', {\n  //         method: 'POST',\n  //         body: JSON.stringify(bodyData),\n  //         headers: {'Content-Type': 'application/json'}\n  //     })\n  //     console.log(this)\n  // \tconst getPathData = await makeRequest.json()\n  // \tconsole.log(getPathData)\n  // \tif (makeRequest.status === 200) {\n  // \t\tif (getPathData.error) {\n  // \t\t\tconsole.log('Error in server bud')\n  // \t\t\tthis.setState({pathexists : false})\n  // \t\t}else{\n  // \t\t\tif (getPathData.pathresponse[0].id == dbId) {\n  // \t\t\t\tthis.setState({data : getPathData.pathresponse[0].events})\n  // \t\t\t\tconsole.log(getPathData.pathresponse[0].id, dbId)\n  // \t\t\t}else{\n  // \t\t\t\tthis.setState({pathexists : false})\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // \t// console.log(makeRequest.status, getPathData)\n  // \treturn 'Done'\n  // }\n\n\n  render() {\n    const {\n      pathexists,\n      theId,\n      data,\n      comingsoon\n    } = this.state;\n\n    function createData(name, calories, fat, carbs, protein) {\n      return {\n        name,\n        calories,\n        fat,\n        carbs,\n        protein\n      };\n    }\n\n    const pathReasonCodes = reason => {\n      const referenceData = {\n        0: 'r',\n        1: 'Input 1 state change',\n        2: 'Input 2 state change',\n        3: 'Input 3 state change',\n        4: 'Input 4 state change',\n        5: 'Input 5 state change',\n        6: 'Cold Start',\n        7: 'Power Off',\n        8: 'Geofence',\n        9: 'Motion Stop',\n        10: 'Motion Start',\n        11: 'Standard Event',\n        12: 'Power On',\n        13: 'Panic'\n      };\n      const resultsArray = [];\n\n      if (typeof reason == 'string') {\n        const reasonCodesArray = reason.split(',');\n\n        for (let i = 0; i < reasonCodesArray.length; i++) {\n          let inputResean = reasonCodesArray[i]; // console.log('reason :',inputResean, '=>>>>>',referenceData[inputResean])\n\n          if (referenceData[inputResean]) {\n            // Put each input that exists in reference in resultsArray \n            resultsArray.push(referenceData[inputResean]);\n          }\n        }\n      } else {\n        // check if input == type integer \n        console.log('Its a number or something other than string', reason);\n      }\n\n      return resultsArray;\n    }; // console.log('LOGGING data.. :',data)\n    // console.log(data, this)\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => this.getDateTimeValue(e),\n        children: [/*#__PURE__*/_jsxDEV(DateTimePicker, {\n          props: 'TEST PROP',\n          thedata: \"JOLLY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" get path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }, this), data && /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: \"classes.table\",\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Source\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Date Time\\xA0(PST)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Speed\\xA0(MPH)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Heading\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Log Reason\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Distance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Lat\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Long\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 24\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: !pathexists && /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"No path Exists for this Asset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: data.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: row.source\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.speed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.heading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: pathReasonCodes(row.reasons)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.distance_traveled\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.lat\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.lng\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 26\n              }, this)]\n            }, row.time, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 24\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Path;","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/path.js"],"names":["React","Component","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","DateTimePicker","Path","constructor","props","state","data","pathexists","theId","startDateTime","endDateTime","componentDidMount","getDateTimeValue","e","preventDefault","s","console","log","target","getDateTime","render","comingsoon","createData","name","calories","fat","carbs","protein","pathReasonCodes","reason","referenceData","resultsArray","reasonCodesArray","split","i","length","inputResean","push","map","row","source","time","speed","heading","reasons","distance_traveled","lat","lng"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './path.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DateTimePicker from '../datetime/datetime-picker';\n\n\nclass Path extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\t// this.fetchPathData = this.fetchPathData.bind(this)\n\t\tthis.state = {\n\t\t\tdata :[],\n\t\t\tpathexists : true,\n\t\t\ttheId : this.props.data,\n\t\t\tstartDateTime : '',\n\t\t\tendDateTime : ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t}\n\n\tgetDateTimeValue(e){\n\t\t// consider getting the timestandp from submit to calculate how long your app takes\n\t\te.preventDefault()\n\t\tlet s = e\n\t\t// for (let i = 0; i < e.target.length; i++ ) {\n\t\t// \tconsole.log(s[i])\n\t\t// }\n\t\tconsole.log('FROM PAHT UNDER SUBMIT :',e.target)\n\t\t// console.log('FROM PAHT UNDER SUBMIT #2 :', typeof s.target)\n\n\t}\n\n\tgetDateTime(e){\n\t\tconsole.log(e, 'FROM PAth')\n\t}\n\n\t// async fetchPathData (params)  {\n\t// \tlet start = 1603971032\n\t// \tlet end = 1608230858\n\t// \tlet dbId = params\n\t// \tconsole.log(this)\n\t// \tthis.setState({data : []})\n\t// \tlet bodyData = {\n\t// \t\t'params': {\n\t// \t\t\t'stime': start,\n\t// \t\t\t'etime': end,\n\t// \t\t\t'dbId' : dbId \n\t// \t\t\t\t}}\n\t// \tconst makeRequest = await fetch('/path', {\n\t//         method: 'POST',\n\t//         body: JSON.stringify(bodyData),\n\t//         headers: {'Content-Type': 'application/json'}\n\t//     })\n\t//     console.log(this)\n\t// \tconst getPathData = await makeRequest.json()\n\t// \tconsole.log(getPathData)\n\t// \tif (makeRequest.status === 200) {\n\t// \t\tif (getPathData.error) {\n\t// \t\t\tconsole.log('Error in server bud')\n\t// \t\t\tthis.setState({pathexists : false})\n\t// \t\t}else{\n\t// \t\t\tif (getPathData.pathresponse[0].id == dbId) {\n\t// \t\t\t\tthis.setState({data : getPathData.pathresponse[0].events})\n\t// \t\t\t\tconsole.log(getPathData.pathresponse[0].id, dbId)\n\t// \t\t\t}else{\n\t// \t\t\t\tthis.setState({pathexists : false})\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \t// console.log(makeRequest.status, getPathData)\n\t// \treturn 'Done'\n\t// }\n\trender(){\n\t\tconst {pathexists, theId, data, comingsoon} = this.state\n\t\tfunction createData(name, calories, fat, carbs, protein) {\n\t\t  return { name, calories, fat, carbs, protein };\n\t\t}\n\t\tconst pathReasonCodes = (reason) => {\n\t\t\tconst referenceData = {\n\t\t\t\t0: 'r',\n\t\t\t\t1:\t'Input 1 state change',\n\t\t\t\t2:\t'Input 2 state change',\n\t\t\t\t3:\t'Input 3 state change',\n\t\t\t\t4:\t'Input 4 state change',\n\t\t\t\t5:\t'Input 5 state change',\n\t\t\t\t6:\t'Cold Start',\n\t\t\t\t7:\t'Power Off',\n\t\t\t\t8:\t'Geofence',\n\t\t\t\t9:\t'Motion Stop',\n\t\t\t\t10:\t'Motion Start',\n\t\t\t\t11:\t'Standard Event',\n\t\t\t\t12:\t'Power On',\n\t\t\t\t13:\t'Panic'\n\t\t\t}\n\n\t\t\tconst resultsArray = []\n\t\t\tif (typeof reason == 'string'){ \n\t\t\t\tconst reasonCodesArray = reason.split(',')\n\t\t\t\tfor(let i=0; i<reasonCodesArray.length; i++ ){\n\t\t\t\t\tlet inputResean = reasonCodesArray[i]\n\t\t\t\t\t// console.log('reason :',inputResean, '=>>>>>',referenceData[inputResean])\n\n\t\t\t  \t\tif ( referenceData[inputResean] ){ // Put each input that exists in reference in resultsArray \n\t\t\t  \t\t\tresultsArray.push(referenceData[inputResean])\n\t\t\t \t\t }\t\n\t\t\t\t}\n\t\t\t}else{// check if input == type integer \n\t\t\tconsole.log('Its a number or something other than string', reason)\n\t\t\t}\n\t\t\treturn resultsArray\n\t\t\t}\n\t\t// console.log('LOGGING data.. :',data)\n\t\t// console.log(data, this)\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={(e)=> this.getDateTimeValue(e)}>\n\t\t\t\t\t<DateTimePicker props={'TEST PROP'} thedata='JOLLY'/>\n\t\t\t\t\t<button> get path</button>\n\t\t\t\t</form>\n\t\t\t\t   { data &&\n\t\t\t\t   \t\t<TableContainer component={Paper}>\n   \t   \t\t\t\t      <Table className=\"classes.table\" aria-label=\"simple table\">\n   \t   \t\t\t\t        <TableHead>\n   \t   \t\t\t\t          <TableRow>\n   \t   \t\t\t\t            <TableCell>Source</TableCell>\n   \t   \t\t\t\t            <TableCell>Date Time&nbsp;(PST)</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Speed&nbsp;(MPH)</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Heading</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Log Reason</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Distance</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Lat</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Long</TableCell>\n   \t   \t\t\t\t          </TableRow>\n   \t   \t\t\t\t        </TableHead>\n   \t   \t\t\t\t        <TableBody>\n   \t   \t\t\t\t        <TableRow>\n   \t   \t\t\t\t        {!pathexists && <TableCell align=\"center\">No path Exists for this Asset</TableCell> }\n   \t   \t\t\t\t        </TableRow>\n   \t   \t\t\t\t        </TableBody>\n   \t   \t\t\t\t        <TableBody>\n   \t   \t\t\t\t          {data.map((row) => (\n   \t   \t\t\t\t            <TableRow key={row.time}>\n\n   \t   \t\t\t\t              <TableCell component=\"th\" scope=\"row\">\n   \t   \t\t\t\t                {row.source}\n   \t   \t\t\t\t              </TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.time}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.speed}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.heading}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{pathReasonCodes(row.reasons)}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.distance_traveled}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.lat}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.lng}</TableCell>\n   \t   \t\t\t\t            </TableRow>\n   \t   \t\t\t\t          ))}\n   \t   \t\t\t\t        </TableBody>\n   \t   \t\t\t\t      </Table>\n   \t   \t\t\t\t    </TableContainer>\n\t\t\t\t   \t}\n\t\t\t</div>\n\t\t\t)\n\t}\n }\n\nexport default Path;"]},"metadata":{},"sourceType":"module"}