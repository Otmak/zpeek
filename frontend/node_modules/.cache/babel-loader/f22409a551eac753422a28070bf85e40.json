{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/App.js\";\nimport React, { Component } from 'react';\nimport AppContainer from './components/app-container/app-container';\nimport ElevateAppBar from './components/app-container/app-container';\nimport SignInFirst from './components/signin/signin';\nimport './App.css'; // add Tooltips all across app\n//https://material-ui.com/components/snackbars/ use these bars to show a console log activity\n// https://material-ui.com/components/dialogs/ this is for swapping account code and Full screen  gendata or path\\\n//https://material-ui.com/components/lists/ use this for layout of CONTROL MENU\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n    this.state = {\n      assets: [],\n      wasAlreadyHere: false,\n      viewBothActiveAndInactive: false,\n      weGot200: false,\n      accountCode: localStorage.getItem('entryCardAccount'),\n      passWord: localStorage.getItem('entryCardHash')\n    };\n  }\n\n  componentDidMount() {\n    // localStorage.clear();\n    this._isMounted = true;\n    const {\n      accountCode,\n      passWord\n    } = this.state;\n\n    const validate = v => v === '' || v === undefined || v === null ? false : true; // console.log('test', false && false)\n\n\n    console.log('Component mounted =>', `account code : ${accountCode}, hash: ${passWord} `);\n\n    if (validate(accountCode) && validate(passWord)) {\n      console.log('Looks like we got some data to use... making the call in 7 secs');\n      console.log(this);\n      this.setState({\n        weGot200: true\n      });\n      setTimeout(() => {\n        this.letsGetStarted();\n      }, 3000);\n    } else {\n      console.log('The data is null', this);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getGettingStartedData(e) {\n    // console.log(`${e.target.name}, : ${e.target.value}`)\n    // const {accountCode, password} this.state\n    const handle = e.target.name;\n    const handleValue = e.target.value;\n    console.log(handle, ':', handleValue);\n    this.setState({\n      [handle]: handleValue\n    }); // console.log(e.target.name, )\n  }\n\n  async letsGetStarted() {\n    // e.preventDefault()\n    const {\n      accountCode,\n      passWord\n    } = this.state; // console.log(accountCode, passWord)\n    // console.log('test', true && true)\n\n    console.log('Submiting..', `account code : ${accountCode}, hash: ${passWord} `); // console.log(`&& : ${!accountCode === null && !passWord === null } account null ${accountCode != null}`)\n    // console.log(`|| : ${accountCode === null || passWord === null}, pass null ?${passWord != null} `)\n    // if (accountCode != null && passWord != null ){\n    //   console.log('Looks like we got some data to use... making the call in 7 secs')\n    //     setTimeout(()=>{\n    //       console.log('fetching')\n    //     }, 7000)\n    //   }else{\n    //     console.log('The data is null')\n    //   }\n\n    const validate = v => v === '' || v === undefined || v === null ? false : true; // console.log('BIG TEST :', validate(accountCode) && validate(passWord))\n    // return;\n    // if (v === '' || v === undefined) {\n    //   // console.log('Your params are weak bruh')\n    //   return false\n    // }else{\n    //   return true\n    // }\n    // const {accountCode, passWord} = this.state\n    // console.log(validate(accountCode) === validate(passWord), validate(accountCode), validate(passWord))\n\n\n    if (validate(accountCode) && validate(passWord)) {\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n      const bodyData = {\n        'account': accountCode,\n        'hashed': passWord\n      };\n      localStorage.setItem('entryCardAccount', accountCode);\n      localStorage.setItem('entryCardHash', passWord);\n      const makeRequest = await fetch('/assets', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const getInitialData = await makeRequest.json();\n      console.log(makeRequest.status);\n\n      if (makeRequest.status === 200 && !getInitialData.error) {\n        //this._isMounted\n        console.log(getInitialData);\n        this.setState({\n          weGot200: true,\n          assets: getInitialData\n        });\n      } else {\n        console.log('ERROR:', getInitialData);\n      } // console.log('Making initial call with ....', accountCode, passWord)\n\n    } else {\n      console.log('the form is empty...'); // console.log(`Account : ${accountCode}  password ${passWord}`)\n    }\n  }\n\n  render() {\n    const {\n      assets,\n      accountCode,\n      passWord,\n      weGot200\n    } = this.state; // const assetListLenghth = assets.length\n    // const activeAssetsList = assets.filter( asset=> asset.status == '1')\n\n    console.log(`Is it 200? ${weGot200}`);\n    console.log(this); // if ( weGot200 ) {\n    //   return(\n    //       <div className='App'>\n    //         <AppContainer data={{'account': accountCode, 'pass':passWord }}/>\n    //       </div>\n    //   )} \n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [weGot200 && /*#__PURE__*/_jsxDEV(AppContainer, {\n        data: {\n          'account': accountCode,\n          'hashed': passWord,\n          'assetdata': assets\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 23\n      }, this), !weGot200 && /*#__PURE__*/_jsxDEV(SignInFirst, {\n        getFormData: e => this.getGettingStartedData(e),\n        letsGetStarted: () => this.letsGetStarted()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/App.js"],"names":["React","Component","AppContainer","ElevateAppBar","SignInFirst","App","constructor","_isMounted","state","assets","wasAlreadyHere","viewBothActiveAndInactive","weGot200","accountCode","localStorage","getItem","passWord","componentDidMount","validate","v","undefined","console","log","setState","setTimeout","letsGetStarted","componentWillUnmount","getGettingStartedData","e","handle","target","name","handleValue","value","bodyData","setItem","makeRequest","fetch","method","body","JSON","stringify","headers","getInitialData","json","status","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AppContainer from './components/app-container/app-container';\nimport ElevateAppBar from './components/app-container/app-container';\nimport SignInFirst from './components/signin/signin'\nimport './App.css';\n\n// add Tooltips all across app\n//https://material-ui.com/components/snackbars/ use these bars to show a console log activity\n// https://material-ui.com/components/dialogs/ this is for swapping account code and Full screen  gendata or path\\\n//https://material-ui.com/components/lists/ use this for layout of CONTROL MENU\nexport default class App extends Component {\n  _isMounted = false;\n  constructor(){\n  super()\n  this.state = {\n    assets: [],\n    wasAlreadyHere: false,\n    viewBothActiveAndInactive : false,\n    weGot200 : false,\n    accountCode : localStorage.getItem('entryCardAccount'), \n    passWord : localStorage.getItem('entryCardHash')\n   }\n  }\n\n  componentDidMount() {\n    // localStorage.clear();\n     this._isMounted = true;\n     const { accountCode, passWord } = this.state\n     const validate = (v) =>  v === '' || v === undefined || v === null ? false : true \n     // console.log('test', false && false)\n     console.log('Component mounted =>' ,`account code : ${accountCode}, hash: ${passWord} `)\n\n     if (validate(accountCode) && validate(passWord)){\n      console.log('Looks like we got some data to use... making the call in 7 secs')\n      console.log(this)\n      this.setState({weGot200 : true})\n          setTimeout(()=>{\n            this.letsGetStarted()\n          }, 3000)\n        }else{\n          console.log('The data is null', this)\n        }\n  }\n\n\n    componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n\n  getGettingStartedData(e){\n    // console.log(`${e.target.name}, : ${e.target.value}`)\n    // const {accountCode, password} this.state\n    const handle = e.target.name\n    const handleValue = e.target.value\n    console.log( handle,':',handleValue)\n    this.setState({ [handle] : handleValue })\n    // console.log(e.target.name, )\n\n  }\n\n\n  async letsGetStarted(){\n    // e.preventDefault()\n    const {accountCode, passWord} = this.state\n    // console.log(accountCode, passWord)\n         // console.log('test', true && true)\n     console.log('Submiting..' ,`account code : ${accountCode}, hash: ${passWord} `)\n     // console.log(`&& : ${!accountCode === null && !passWord === null } account null ${accountCode != null}`)\n     // console.log(`|| : ${accountCode === null || passWord === null}, pass null ?${passWord != null} `)\n      // if (accountCode != null && passWord != null ){\n      //   console.log('Looks like we got some data to use... making the call in 7 secs')\n      //     setTimeout(()=>{\n      //       console.log('fetching')\n      //     }, 7000)\n      //   }else{\n      //     console.log('The data is null')\n      //   }\n    const validate = (v) =>  v === '' || v === undefined || v === null ? false : true \n\n    // console.log('BIG TEST :', validate(accountCode) && validate(passWord))\n    // return;\n    \n\n      // if (v === '' || v === undefined) {\n      //   // console.log('Your params are weak bruh')\n      //   return false\n      // }else{\n      //   return true\n\n      // }\n      \n    \n    // const {accountCode, passWord} = this.state\n    // console.log(validate(accountCode) === validate(passWord), validate(accountCode), validate(passWord))\n    if ( validate(accountCode) && validate(passWord)) {\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n      const bodyData = {\n        'account' : accountCode,\n        'hashed' : passWord\n      }\n      localStorage.setItem('entryCardAccount', accountCode)\n      localStorage.setItem('entryCardHash', passWord)\n\n      const makeRequest = await fetch('/assets', {\n          method: 'POST',\n          body: JSON.stringify(bodyData),\n          headers: {'Content-Type': 'application/json'}\n      })\n\n      const getInitialData = await makeRequest.json()\n      console.log(makeRequest.status)\n      if ( makeRequest.status === 200 && !getInitialData.error) {//this._isMounted\n        console.log(getInitialData)\n        this.setState({ weGot200 : true, assets : getInitialData})\n        \n      }else {\n        console.log('ERROR:',getInitialData)\n      }\n      // console.log('Making initial call with ....', accountCode, passWord)\n    }else {\n      console.log('the form is empty...')\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n    }\n  }\n\n  \n  render() {\n    const {assets, accountCode, passWord, weGot200 } = this.state\n    // const assetListLenghth = assets.length\n    // const activeAssetsList = assets.filter( asset=> asset.status == '1')\n    console.log(`Is it 200? ${weGot200}`)\n    console.log(this)\n\n\n    // if ( weGot200 ) {\n    //   return(\n    //       <div className='App'>\n    //         <AppContainer data={{'account': accountCode, 'pass':passWord }}/>\n    //       </div>\n    //   )} \n\n    return (\n      <div className='App'>\n        { weGot200 && <AppContainer data={{'account': accountCode, 'hashed':passWord, 'assetdata': assets }}/>}\n        { !weGot200 && <SignInFirst getFormData={(e)=>this.getGettingStartedData(e)} letsGetStarted={()=>this.letsGetStarted()}/>}\n      </div>\n  )}\n}\n"]},"metadata":{},"sourceType":"module"}