{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/location/location.js\";\nimport React, { Component } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport './location.css';\nexport default class Location extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationDetails: [],\n      data: this.props.data,\n      isComponentMounted: false,\n      isLocationLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchManiData();\n    this.setState({\n      isComponentMounted: false\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isComponentMounted: false\n    });\n  }\n\n  async fetchManiData() {\n    // console.log('fetching location...')\n    const {\n      data: {\n        id = null,\n        gpsid = null\n      },\n      isComponentMounted\n    } = this.state;\n    this.setState({\n      locationDetails: []\n    });\n\n    if (gpsid === null) {\n      // console.log(` Location :- Either Component unmounted or gps null mouted?==>${isComponentMounted} gps==> ${gpsid}`)\n      this.setState({\n        isLocationLoading: false\n      });\n      return;\n    } else {\n      // this.setState({isLocationLoading : true})\n      let bodyData = {\n        'params': {\n          'id': id,\n          'gpsid': gpsid\n        }\n      };\n      const makeRequest = await fetch('/location', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // console.log('End',makeRequest)\n\n      const getLocationData = await makeRequest.json(); // console.log(getLocationData)\n\n      if (makeRequest.status === 200 && isComponentMounted) {\n        if (getLocationData.error) {\n          console.log('Error in server ', getLocationData.error);\n          this.setState({\n            isLocationLoading: false\n          });\n        } else {\n          if (getLocationData) {\n            this.setState({\n              locationDetails: getLocationData.locationresponse\n            }); // console.log(getLocationData)\n          } else {\n            // this.setState({pathexists : false})\n            console.log('Error AFTER 200 status on fetch');\n          }\n        }\n      } else {\n        // console.log(`Error AFTER 200 status on fetch or Component is unmounted... COMP mounted?==>${isComponentMounted}`)\n        // this.setSate({gettingMani: false})\n        return;\n      }\n    }\n\n    return 'Done';\n  }\n\n  render() {\n    const {\n      locationDetails\n    } = this.state; // console.log(locationDetails)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: locationDetails.power == 'on' ? /*#__PURE__*/_jsxDEV(Chip, {\n        className: \"chip-on\",\n        label: \"On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n        className: \"chip-off\",\n        label: \"Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 79\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/location/location.js"],"names":["React","Component","Chip","Location","constructor","props","state","locationDetails","data","isComponentMounted","isLocationLoading","componentDidMount","fetchManiData","setState","componentWillUnmount","id","gpsid","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getLocationData","json","status","error","console","log","locationresponse","render","power"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAO,gBAAP;AAGA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAgC;AAC9CG,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,eAAe,EAAG,EADN;AAEZC,MAAAA,IAAI,EAAG,KAAKH,KAAL,CAAWG,IAFN;AAGZC,MAAAA,kBAAkB,EAAG,KAHT;AAIZC,MAAAA,iBAAiB,EAAG;AAJR,KAAb;AAMA;;AAEDC,EAAAA,iBAAiB,GAAE;AAClB,SAAKC,aAAL;AACA,SAAKC,QAAL,CAAc;AAACJ,MAAAA,kBAAkB,EAAG;AAAtB,KAAd;AACA;;AAGDK,EAAAA,oBAAoB,GAAE;AACrB,SAAKD,QAAL,CAAc;AAACJ,MAAAA,kBAAkB,EAAG;AAAtB,KAAd;AACG;;AAEF,QAAMG,aAAN,GAAsB;AAEvB;AACA,UAAM;AAAEJ,MAAAA,IAAI,EAAG;AAAEO,QAAAA,EAAE,GAAC,IAAL;AAAWC,QAAAA,KAAK,GAAC;AAAjB,OAAT;AAAkCP,MAAAA;AAAlC,QAAwD,KAAKH,KAAnE;AACA,SAAKO,QAAL,CAAc;AAACN,MAAAA,eAAe,EAAG;AAAnB,KAAd;;AAEA,QAAIS,KAAK,KAAK,IAAd,EAAmB;AAClB;AACA,WAAKH,QAAL,CAAc;AAACH,QAAAA,iBAAiB,EAAE;AAApB,OAAd;AACA;AACA,KAJD,MAIK;AACJ;AACA,UAAIO,QAAQ,GAAG;AACf,kBAAU;AACT,gBAAMF,EADG;AAET,mBAASC;AAFA;AADK,OAAf;AAKA,YAAME,WAAW,GAAG,MAAMC,KAAK,CAAC,WAAD,EAAc;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AAH6B,OAAd,CAA/B,CAPI,CAYD;;AACH,YAAMC,eAAe,GAAG,MAAMP,WAAW,CAACQ,IAAZ,EAA9B,CAbI,CAcJ;;AAGA,UAAIR,WAAW,CAACS,MAAZ,KAAuB,GAAvB,IAA8BlB,kBAAlC,EAAsD;AACrD,YAAIgB,eAAe,CAACG,KAApB,EAA2B;AAC1BC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BL,eAAe,CAACG,KAA/C;AACA,eAAKf,QAAL,CAAc;AAACH,YAAAA,iBAAiB,EAAG;AAArB,WAAd;AACA,SAHD,MAGK;AACJ,cAAIe,eAAJ,EAAqB;AACpB,iBAAKZ,QAAL,CAAc;AAACN,cAAAA,eAAe,EAAGkB,eAAe,CAACM;AAAnC,aAAd,EADoB,CAEpB;AACA,WAHD,MAGK;AACJ;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA;AACD;AACD,OAbD,MAaK;AACJ;AACA;AACA;AACA;AACD;;AAED,WAAO,MAAP;AACA;;AAEDE,EAAAA,MAAM,GAAE;AAEP,UAAM;AAACzB,MAAAA;AAAD,QAAoB,KAAKD,KAA/B,CAFO,CAGP;;AACA,wBACC;AAAA,gBAEEC,eAAe,CAAC0B,KAAhB,IAAyB,IAAzB,gBAAgC,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,cAAhC,gBAAyE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AAF3E;AAAA;AAAA;AAAA;AAAA,YADD;AAME;;AAjF2C","sourcesContent":["import React, {Component} from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport './location.css';\n\n\nexport default class Location extends Component{\n\tconstructor (props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tlocationDetails : [],\n\t\t\tdata : this.props.data,\n\t\t\tisComponentMounted : false,\n\t\t\tisLocationLoading : true\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.fetchManiData()\n\t\tthis.setState({isComponentMounted : false})\n\t}\n\n\n\tcomponentWillUnmount(){\n\t\tthis.setState({isComponentMounted : false})\n    }\n\n  \tasync fetchManiData() {\n\n\t\t// console.log('fetching location...')\n\t\tconst { data : { id=null, gpsid=null }, isComponentMounted} = this.state\n\t\tthis.setState({locationDetails : []})\n\n\t\tif (gpsid === null){\n\t\t\t// console.log(` Location :- Either Component unmounted or gps null mouted?==>${isComponentMounted} gps==> ${gpsid}`)\n\t\t\tthis.setState({isLocationLoading: false})\n\t\t\treturn;\n\t\t}else{\n\t\t\t// this.setState({isLocationLoading : true})\n\t\t\tlet bodyData = {\n\t\t\t'params': {\n\t\t\t\t'id': id,\n\t\t\t\t'gpsid': gpsid\n\t\t\t\t}}\n\t\t\tconst makeRequest = await fetch('/location', {\n\t\t        method: 'POST',\n\t\t        body: JSON.stringify(bodyData),\n\t\t        headers: {'Content-Type': 'application/json'}\n\t\t    })\n\t\t    // console.log('End',makeRequest)\n\t\t\tconst getLocationData = await makeRequest.json()\n\t\t\t// console.log(getLocationData)\n\n\n\t\t\tif (makeRequest.status === 200 && isComponentMounted) {\n\t\t\t\tif (getLocationData.error) {\n\t\t\t\t\tconsole.log('Error in server ',getLocationData.error )\n\t\t\t\t\tthis.setState({isLocationLoading : false})\n\t\t\t\t}else{\n\t\t\t\t\tif (getLocationData) {\n\t\t\t\t\t\tthis.setState({locationDetails : getLocationData.locationresponse})\n\t\t\t\t\t\t// console.log(getLocationData)\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// this.setState({pathexists : false})\n\t\t\t\t\t\tconsole.log('Error AFTER 200 status on fetch')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t// console.log(`Error AFTER 200 status on fetch or Component is unmounted... COMP mounted?==>${isComponentMounted}`)\n\t\t\t\t// this.setSate({gettingMani: false})\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\treturn 'Done'\n\t}\n\n\trender(){\n\n\t\tconst {locationDetails} = this.state\n\t\t// console.log(locationDetails)\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\tlocationDetails.power == 'on' ? <Chip className='chip-on' label='On'/> : <Chip className='chip-off' label='Off'/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)}\n}"]},"metadata":{},"sourceType":"module"}