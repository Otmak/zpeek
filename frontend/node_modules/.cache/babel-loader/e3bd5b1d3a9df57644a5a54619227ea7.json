{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/frontend/src/components/asset-content/path/path.js\";\nimport React, { Component } from 'react';\nimport './path.css';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport DateTimePicker from './datetime/datetime-picker'; //add tooltip to help explain some functions\n\nexport default class Path extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      pathexists: true,\n      theId: this.props.data,\n      startDate: new Date().setHours(0, 0, 0, 0) / 1000.0,\n      endDate: new Date().setHours(23, 59, 0, 0) / 1000.0,\n      isComponentMounted: true\n    };\n  }\n\n  componentDidMount() {// console.log('Mounted')\n    // return this.fetchPathData() WORKS!\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isComponentMounted: false\n    });\n  } // getDateTimeValue(e){\n  // \t// consider getting the timestandp from submit to calculate how long your app takes\n  // \te.preventDefault()\n  // \tconsole.log(this)\n  // \tconst {startDate, endDate, theId}  = this.state\n  // \tconst newDateCov = new Date() // can be used as NOW() time stamp\n  // \tconst defaultMidNightStart = newDateCov.setHours(0,0,0,0)\n  // \tconst defaultMidNightend = newDateCov.setHours(23,59,0,0)\n  // \tconsole.log('Setting time to 00:00 :',defaultMidNightStart)\n  // \tconsole.log('Setting time to 23:59 :',defaultMidNightend)\n  // }\n\n\n  getDateTime(e) {\n    let dateTimeValue = e.target.value;\n    let dateTimeId = e.target.id;\n    console.log(dateTimeValue, dateTimeId);\n    let epTime = new Date(dateTimeValue);\n    let selectedEpochTimeInMunites = epTime.getTime() / 1000.0;\n    this.setState({\n      [dateTimeId]: selectedEpochTimeInMunites\n    });\n  } // convertTimeToEpoch(){\n  // \treturn ()=> {this.fetchPathData\n  // }\n\n\n  async fetchPathData() {\n    // let start = 1603971032\n    // let end = 1608230858\n    const {\n      theId,\n      startDate,\n      endDate,\n      isComponentMounted\n    } = this.state;\n    console.log('Start', this);\n    let bodyData = {\n      'params': {\n        'stime': startDate,\n        'etime': endDate,\n        'dbId': theId\n      }\n    };\n    const makeRequest = await fetch('/path', {\n      method: 'POST',\n      body: JSON.stringify(bodyData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('End', makeRequest);\n    const getPathData = await makeRequest.json();\n    console.log(getPathData);\n\n    if (makeRequest.status === 200) {\n      if (getPathData.error) {\n        console.log('Error in server bud');\n        this.setState({\n          pathexists: false\n        });\n      } else {\n        if (getPathData.pathresponse[0].id == theId && isComponentMounted) {\n          this.setState({\n            data: getPathData.pathresponse[0].events\n          });\n          console.log(getPathData.pathresponse[0].id, theId);\n        } else {\n          // this.setState({pathexists : false})\n          return;\n        }\n      }\n    }\n\n    return 'Done';\n  }\n\n  render() {\n    const {\n      pathexists,\n      theId,\n      data,\n      comingsoon\n    } = this.state;\n\n    const pathReasonCodes = reason => {\n      const referenceData = {\n        0: 'r',\n        1: 'Input 1 state change',\n        2: 'Input 2 state change',\n        3: 'Input 3 state change',\n        4: 'Input 4 state change',\n        5: 'Input 5 state change',\n        6: 'Cold Start',\n        7: 'Power Off',\n        8: 'Geofence',\n        9: 'Motion Stop',\n        10: 'Motion Start',\n        11: 'Standard Event',\n        12: 'Power On',\n        13: 'Panic'\n      };\n      const resultsArray = [];\n\n      if (typeof reason == 'string') {\n        const reasonCodesArray = reason.split(',');\n\n        for (let i = 0; i < reasonCodesArray.length; i++) {\n          let inputResean = reasonCodesArray[i]; // console.log('reason :',inputResean, '=>>>>>',referenceData[inputResean])\n\n          if (referenceData[inputResean]) {\n            // Put each input that exists in reference in resultsArray \n            resultsArray.push(referenceData[inputResean]);\n          }\n        }\n      } else {\n        // if type not string\n        console.log('Its a number or something other than string', reason);\n      }\n\n      return resultsArray;\n    }; // console.log('LOGGING data.. :',data)\n    // console.log(data, this)\n\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DateTimePicker, {\n        className: \"date-time-picker\",\n        getdata: () => this.fetchPathData(),\n        label: \"Get Path\",\n        getsdate: e => this.getDateTime(e),\n        getedate: e => this.getDateTime(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: \"classes.table\",\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Source\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Date Time\\xA0(PST)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Speed\\xA0(MPH)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Heading\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Log Reason\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Distance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Lat\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Long\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 24\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: !pathexists && /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"No path Exists for this Asset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: data.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: row.source\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.speed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.heading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: pathReasonCodes(row.reasons)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.distance_traveled\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.lat\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 26\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.lng\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 26\n              }, this)]\n            }, row.time, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 24\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/frontend/src/components/asset-content/path/path.js"],"names":["React","Component","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","TextField","Button","DateTimePicker","Path","constructor","props","state","data","pathexists","theId","startDate","Date","setHours","endDate","isComponentMounted","componentDidMount","componentWillUnmount","setState","getDateTime","e","dateTimeValue","target","value","dateTimeId","id","console","log","epTime","selectedEpochTimeInMunites","getTime","fetchPathData","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getPathData","json","status","error","pathresponse","events","render","comingsoon","pathReasonCodes","reason","referenceData","resultsArray","reasonCodesArray","split","i","length","inputResean","push","map","row","source","time","speed","heading","reasons","distance_traveled","lat","lng"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './path.css'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport DateTimePicker from './datetime/datetime-picker';\n\n//add tooltip to help explain some functions\nexport default class Path extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdata :[],\n\t\t\tpathexists : true,\n\t\t\ttheId : this.props.data,\n\t\t\tstartDate: new Date().setHours(0,0,0,0)/1000.0,\n\t\t\tendDate: new Date().setHours(23,59,0,0)/1000.0,\n\t\t\tisComponentMounted:true\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\t// console.log('Mounted')\n\t\t// return this.fetchPathData() WORKS!\n\t\n\t}\n\n\tcomponentWillUnmount(){\n\t\tthis.setState({isComponentMounted : false})\n  }\n\n\t// getDateTimeValue(e){\n\t// \t// consider getting the timestandp from submit to calculate how long your app takes\n\t// \te.preventDefault()\n\t// \tconsole.log(this)\n\t// \tconst {startDate, endDate, theId}  = this.state\n\n\t// \tconst newDateCov = new Date() // can be used as NOW() time stamp\n\t// \tconst defaultMidNightStart = newDateCov.setHours(0,0,0,0)\n\t// \tconst defaultMidNightend = newDateCov.setHours(23,59,0,0)\n\n\n\t// \tconsole.log('Setting time to 00:00 :',defaultMidNightStart)\n\t// \tconsole.log('Setting time to 23:59 :',defaultMidNightend)\n\n\n\t// }\n\n\tgetDateTime(e){\n\n\t\tlet dateTimeValue = e.target.value\n  \t\tlet dateTimeId  = e.target.id\n\n  \t\tconsole.log(dateTimeValue, dateTimeId)\n\n  \t\tlet epTime = new Date(dateTimeValue)\n\t\tlet selectedEpochTimeInMunites = epTime.getTime()/1000.0\n\n  \t\tthis.setState({[dateTimeId]: selectedEpochTimeInMunites})\n\t\t\n\t}\n\n\t// convertTimeToEpoch(){\n\t// \treturn ()=> {this.fetchPathData\n\n\t// }\n\n\tasync fetchPathData ()  {\n\t\t// let start = 1603971032\n\t\t// let end = 1608230858\n\t\tconst {theId, startDate, endDate, isComponentMounted} = this.state\n\t\tconsole.log('Start',this)\n\n\t\tlet bodyData = {\n\t\t\t'params': {\n\t\t\t\t'stime': startDate,\n\t\t\t\t'etime': endDate,\n\t\t\t\t'dbId' : theId \n\t\t\t\t\t}}\n\t\tconst makeRequest = await fetch('/path', {\n\t        method: 'POST',\n\t        body: JSON.stringify(bodyData),\n\t        headers: {'Content-Type': 'application/json'}\n\t    })\n\t    console.log('End',makeRequest)\n\t\tconst getPathData = await makeRequest.json()\n\t\tconsole.log(getPathData)\n\t\tif (makeRequest.status === 200) {\n\t\t\tif (getPathData.error) {\n\t\t\t\tconsole.log('Error in server bud')\n\t\t\t\tthis.setState({pathexists : false})\n\t\t\t}else{\n\t\t\t\tif (getPathData.pathresponse[0].id == theId && isComponentMounted) {\n\t\t\t\t\tthis.setState({data : getPathData.pathresponse[0].events})\n\t\t\t\t\tconsole.log(getPathData.pathresponse[0].id, theId)\n\t\t\t\t}else{\n\t\t\t\t\t// this.setState({pathexists : false})\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 'Done'\n\t}\n\n\n\trender(){\n\t\tconst { pathexists, theId, data, comingsoon } = this.state\n\t\tconst pathReasonCodes = (reason) => {\n\t\t\tconst referenceData = {\n\t\t\t\t0: 'r',\n\t\t\t\t1:\t'Input 1 state change',\n\t\t\t\t2:\t'Input 2 state change',\n\t\t\t\t3:\t'Input 3 state change',\n\t\t\t\t4:\t'Input 4 state change',\n\t\t\t\t5:\t'Input 5 state change',\n\t\t\t\t6:\t'Cold Start',\n\t\t\t\t7:\t'Power Off',\n\t\t\t\t8:\t'Geofence',\n\t\t\t\t9:\t'Motion Stop',\n\t\t\t\t10:\t'Motion Start',\n\t\t\t\t11:\t'Standard Event',\n\t\t\t\t12:\t'Power On',\n\t\t\t\t13:\t'Panic'\n\t\t\t}\n\n\t\t\tconst resultsArray = []\n\t\t\tif (typeof reason == 'string'){ \n\t\t\t\tconst reasonCodesArray = reason.split(',')\n\t\t\t\tfor(let i=0; i<reasonCodesArray.length; i++ ){\n\t\t\t\t\tlet inputResean = reasonCodesArray[i]\n\t\t\t\t\t// console.log('reason :',inputResean, '=>>>>>',referenceData[inputResean])\n\n\t\t\t  \t\tif ( referenceData[inputResean] ){ // Put each input that exists in reference in resultsArray \n\t\t\t  \t\t\tresultsArray.push(referenceData[inputResean])\n\t\t\t \t\t }\t\n\t\t\t\t}\n\t\t\t}else{// if type not string\n\t\t\tconsole.log('Its a number or something other than string', reason)\n\t\t\t}\n\t\t\treturn resultsArray\n\t\t\t}\n\t\t// console.log('LOGGING data.. :',data)\n\t\t// console.log(data, this)\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<DateTimePicker className='date-time-picker' getdata={ ()=> this.fetchPathData()} label='Get Path' getsdate={ (e) => this.getDateTime(e)} getedate={ (e) => this.getDateTime(e)}/>\n\t\t\t\t   { \n\t\t\t\t   \t\t<TableContainer component={Paper}>\n   \t   \t\t\t\t      <Table className=\"classes.table\" aria-label=\"simple table\">\n   \t   \t\t\t\t        <TableHead>\n   \t   \t\t\t\t          <TableRow>\n   \t   \t\t\t\t            <TableCell>Source</TableCell>\n   \t   \t\t\t\t            <TableCell>Date Time&nbsp;(PST)</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Speed&nbsp;(MPH)</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Heading</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Log Reason</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Distance</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Lat</TableCell>\n   \t   \t\t\t\t            <TableCell align=\"right\">Long</TableCell>\n   \t   \t\t\t\t          </TableRow>\n   \t   \t\t\t\t        </TableHead>\n   \t   \t\t\t\t        <TableBody>\n\t   \t   \t\t\t\t        <TableRow>\n\t   \t   \t\t\t\t        {!pathexists && <TableCell align=\"center\">No path Exists for this Asset</TableCell> }\n\t   \t   \t\t\t\t        </TableRow>\n   \t   \t\t\t\t        </TableBody>\n   \t   \t\t\t\t        <TableBody>\n   \t   \t\t\t\t          {data.map((row) => (\n   \t   \t\t\t\t            <TableRow key={row.time}>\n   \t   \t\t\t\t              <TableCell component=\"th\" scope=\"row\">\n   \t   \t\t\t\t                {row.source}\n   \t   \t\t\t\t              </TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.time}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.speed}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.heading}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{pathReasonCodes(row.reasons)}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.distance_traveled}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.lat}</TableCell>\n   \t   \t\t\t\t              <TableCell align=\"right\">{row.lng}</TableCell>\n   \t   \t\t\t\t            </TableRow>\n   \t   \t\t\t\t          ))\n   \t   \t\t\t\t          }\n   \t   \t\t\t\t        </TableBody>\n   \t   \t\t\t\t      </Table>\n   \t   \t\t\t\t    </TableContainer>\n\t\t\t\t   \t}\n\t\t\t</React.Fragment>\n\t\t)}\n }\n"]},"metadata":{},"sourceType":"module"}