{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/gendata/gendata.js\";\nimport React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\nimport HotelIcon from '@material-ui/icons/Hotel';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nclass Gendata extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      accordionActive: ''\n    };\n  }\n\n  getDateTime(e) {\n    let dateTimeValue = e.target.value;\n    let dateTimeId = e.target.id; // console.log(this)\n\n    let epTime = new Date(dateTimeValue);\n    let selectedEpochTime = epTime.getTime() / 1000.0;\n    this.setState({\n      [dateTimeId]: selectedEpochTime\n    });\n    console.log(dateTimeValue, dateTimeId, 'FROM PATH....', this);\n  }\n\n  async testMethod(e) {\n    e.preventDefault();\n    const makeRequest = await fetch('/gendata', {\n      method: 'POST',\n      body: 'JSON.stringify(bodyData)',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const getPathData = await makeRequest.json();\n    console.log(getPathData.gendata[0]);\n    this.setState({\n      data: getPathData.gendata[0]\n    });\n  }\n\n  async fetchGendata() {// \n  }\n\n  handleExpand(panel) {\n    const {\n      accordionActive\n    } = this.state;\n\n    if (panel === accordionActive) {\n      console.log('Panel active setting to inactive');\n      this.setState({\n        accordionActive: panel\n      });\n    } else {\n      console.log('panel not active, setting to active....');\n      this.setState({\n        accordionActive: panel\n      });\n    }\n  }\n\n  render() {\n    const {\n      data,\n      accordionActive\n    } = this.state;\n    const loded = Object.entries(data).map(([key, b]) => {\n      console.log(typeof key); // console.log(`${key} =====> ${b.labels}`)\n    });\n\n    const timeStmp = epTime => {\n      let ntime = new Date(epTime * 1000);\n      console.log(typeof ntime);\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let pasrseTime = `${monthNames[ntime.getMonth()]}-${ntime.getDay()} ${ntime.getFullYear()} ${ntime.getHours()}:${ntime.getMinutes()}`;\n      return pasrseTime;\n    };\n\n    console.log(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => this.testMethod(e),\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"startDate\",\n          variant: \"outlined\",\n          label: \"Start\",\n          type: \"datetime-local\",\n          onChange: e => this.getDateTime(e),\n          InputLabelProps: {\n            shrink: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"endDate\",\n          variant: \"outlined\",\n          label: \"End\",\n          type: \"datetime-local\",\n          onChange: e => this.getDateTime(e),\n          InputLabelProps: {\n            shrink: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" Get Gendata\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gendata-a-container\",\n        children: /*#__PURE__*/_jsxDEV(Timeline, {\n          align: \"alternate\",\n          children: Object.entries(data).map(([i, b]) => /*#__PURE__*/_jsxDEV(TimelineItem, {\n            children: [/*#__PURE__*/_jsxDEV(TimelineOppositeContent, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: timeStmp(i)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TimelineSeparator, {\n              children: [/*#__PURE__*/_jsxDEV(TimelineDot, {\n                children: /*#__PURE__*/_jsxDEV(FastfoodIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TimelineConnector, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TimelineContent, {\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                elevation: 3,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  component: \"h1\",\n                  children: b.labels\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \"Because you need strength\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Gendata;","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/gendata/gendata.js"],"names":["React","Component","TextField","Timeline","TimelineItem","TimelineSeparator","TimelineConnector","TimelineContent","TimelineOppositeContent","TimelineDot","FastfoodIcon","LaptopMacIcon","HotelIcon","RepeatIcon","Paper","Typography","Gendata","constructor","props","state","data","accordionActive","getDateTime","e","dateTimeValue","target","value","dateTimeId","id","epTime","Date","selectedEpochTime","getTime","setState","console","log","testMethod","preventDefault","makeRequest","fetch","method","body","headers","getPathData","json","gendata","fetchGendata","handleExpand","panel","render","loded","Object","entries","map","key","b","timeStmp","ntime","monthNames","pasrseTime","getMonth","getDay","getFullYear","getHours","getMinutes","shrink","i","labels"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\nimport HotelIcon from '@material-ui/icons/Hotel';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nclass Gendata extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data : [],\n      accordionActive: ''\n    }\n  }\n\n  getDateTime(e){\n    let dateTimeValue = e.target.value\n    let dateTimeId  = e.target.id\n    // console.log(this)\n\n    let epTime = new Date(dateTimeValue)\n    let selectedEpochTime = epTime.getTime()/1000.0\n\n    this.setState({[dateTimeId]: selectedEpochTime})\n    console.log(dateTimeValue, dateTimeId, 'FROM PATH....', this)\n  }\n\n  async testMethod(e){\n    e.preventDefault()\n    const makeRequest = await fetch('/gendata', {\n          method: 'POST',\n          body: 'JSON.stringify(bodyData)',\n          headers: {'Content-Type': 'application/json'}\n      })\n    const getPathData = await makeRequest.json()\n    console.log(getPathData.gendata[0])\n    this.setState({data : getPathData.gendata[0]})\n  }\n\n\n  async fetchGendata(){\n    // \n  }\n\n\n  handleExpand(panel){\n    const {accordionActive} = this.state\n    if ( panel === accordionActive ) {\n      console.log('Panel active setting to inactive')\n      this.setState({accordionActive : panel })\n    }else {\n      console.log('panel not active, setting to active....')\n      this.setState({ accordionActive : panel })\n    }\n  }\n\n\n  render(){\n    const { data, accordionActive } = this.state\n    const loded =  Object.entries(data).map(([key, b]) => {\n      console.log(typeof key)\n      // console.log(`${key} =====> ${b.labels}`)\n    })\n    const timeStmp = (epTime)=>{\n      let ntime = new Date(epTime * 1000)\n      console.log(typeof ntime)\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let pasrseTime = `${monthNames[ntime.getMonth()]}-${ntime.getDay()} ${ntime.getFullYear()} ${ntime.getHours()}:${ntime.getMinutes()}`\n      return pasrseTime\n    }\nconsole.log(this)\n    return (\n      <div>\n        <form onSubmit={(e)=> this.testMethod(e)}>\n          <TextField\n            id=\"startDate\"\n            variant='outlined'\n            label=\"Start\"\n            type=\"datetime-local\"\n            onChange={ (e) => this.getDateTime(e)}\n            InputLabelProps={{ shrink: true,}}\n          />\n          <TextField\n            id=\"endDate\"\n            variant='outlined'\n            label=\"End\"\n            type=\"datetime-local\"\n            onChange={ (e) => this.getDateTime(e)}\n            InputLabelProps={{ shrink: true,}}\n           />\n           <button> Get Gendata</button>\n        </form>\n        <div className='gendata-a-container'>\n          \n           <Timeline align=\"alternate\">\n          { \n            Object.entries(data).map(([i, b]) => (\n         \n              <TimelineItem key={i}>\n                <TimelineOppositeContent>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {timeStmp(i)}\n                  </Typography>\n                </TimelineOppositeContent>\n                <TimelineSeparator>\n                  <TimelineDot>\n                    <FastfoodIcon />\n                  </TimelineDot>\n                  <TimelineConnector />\n                </TimelineSeparator>\n                <TimelineContent>\n                  <Paper elevation={3} >\n                    <Typography variant=\"h6\" component=\"h1\">\n                      {b.labels}\n                    </Typography>\n                    <Typography>Because you need strength</Typography>\n                  </Paper>\n                </TimelineContent>\n              </TimelineItem>\n           \n            ))\n        \n          }\n        </Timeline> \n\n        </div>\n      </div>\n    );\n}}\n\n\nexport default Gendata;"]},"metadata":{},"sourceType":"module"}