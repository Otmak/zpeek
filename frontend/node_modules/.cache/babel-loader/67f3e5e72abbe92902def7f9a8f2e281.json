{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/App.js\";\nimport React, { Component } from 'react';\nimport AppContainer from './components/app-container/app-container';\nimport ElevateAppBar from './components/app-container/app-container';\nimport SignInFirst from './components/signin/signin';\nimport './App.css'; // add Tooltips all across app\n//https://material-ui.com/components/snackbars/ use these bars to show a console log activity\n// https://material-ui.com/components/dialogs/ this is for swapping account code and Full screen  gendata or path\\\n//https://material-ui.com/components/lists/ use this for layout of CONTROL MENU\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n    this.state = {\n      assets: [],\n      searchFeild: '',\n      viewBothActiveAndInactive: false,\n      weGot200: false // accountCode : '',\n      // password : ''\n\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const VIP = localStorage.getItem('alreadyHere');\n    console.log(VIP);\n\n    if (VIP) {\n      console.log('went thru...', VIP); // this.setState({ weGot200 : true})\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getGettingStartedData(e) {\n    // console.log(`${e.target.name}, : ${e.target.value}`)\n    // const {accountCode, password} this.state\n    const handle = e.target.name;\n    const handleValue = e.target.value;\n    console.log(handle, ':', handleValue);\n    this.setState({\n      [handle]: handleValue\n    }); // console.log(e.target.name, )\n  }\n\n  async letsGetStarted(e) {\n    e.preventDefault();\n\n    const validate = v => v === '' || v === undefined ? false : true; // if (v === '' || v === undefined) {\n    //   // console.log('Your params are weak bruh')\n    //   return false\n    // }else{\n    //   return true\n    // }\n\n\n    const {\n      accountCode,\n      passWord\n    } = this.state; // console.log(validate(accountCode) === validate(passWord), validate(accountCode), validate(passWord))\n\n    if (validate(accountCode) && validate(passWord)) {\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n      const bodyData = {\n        'account': accountCode,\n        'hashed': passWord\n      };\n      const makeRequest = await fetch('/assets', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const getInitialData = await makeRequest.json();\n      console.log(makeRequest.status);\n\n      if (makeRequest.status === 200 && !getInitialData.error) {\n        //this._isMounted\n        console.log(getInitialData);\n        this.setState({\n          weGot200: true,\n          assets: getInitialData\n        });\n      } else {\n        console.log('ERROR:', getInitialData);\n      } // console.log('Making initial call with ....', accountCode, passWord)\n\n    } else {\n      console.log('the form is empty...'); // console.log(`Account : ${accountCode}  password ${passWord}`)\n    }\n  }\n\n  render() {\n    const {\n      assets,\n      accountCode,\n      passWord,\n      weGot200\n    } = this.state; // const assetListLenghth = assets.length\n    // const activeAssetsList = assets.filter( asset=> asset.status == '1')\n\n    console.log(`Is it 200? ${weGot200}`);\n    console.log(this); // if ( weGot200 ) {\n    //   return(\n    //       <div className='App'>\n    //         <AppContainer data={{'account': accountCode, 'pass':passWord }}/>\n    //       </div>\n    //   )} \n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [weGot200 && /*#__PURE__*/_jsxDEV(AppContainer, {\n        data: {\n          'account': accountCode,\n          'hashed': passWord,\n          'assetdata': assets\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 23\n      }, this), !weGot200 && /*#__PURE__*/_jsxDEV(SignInFirst, {\n        getFormData: e => this.getGettingStartedData(e),\n        letsGetStarted: e => this.letsGetStarted(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/App.js"],"names":["React","Component","AppContainer","ElevateAppBar","SignInFirst","App","constructor","_isMounted","state","assets","searchFeild","viewBothActiveAndInactive","weGot200","componentDidMount","VIP","localStorage","getItem","console","log","componentWillUnmount","getGettingStartedData","e","handle","target","name","handleValue","value","setState","letsGetStarted","preventDefault","validate","v","undefined","accountCode","passWord","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getInitialData","json","status","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AppContainer from './components/app-container/app-container';\nimport ElevateAppBar from './components/app-container/app-container';\nimport SignInFirst from './components/signin/signin'\nimport './App.css';\n\n// add Tooltips all across app\n//https://material-ui.com/components/snackbars/ use these bars to show a console log activity\n// https://material-ui.com/components/dialogs/ this is for swapping account code and Full screen  gendata or path\\\n//https://material-ui.com/components/lists/ use this for layout of CONTROL MENU\nexport default class App extends Component {\n  _isMounted = false;\n  constructor(){\n  super()\n  this.state = {\n    assets: [],\n    searchFeild: '',\n    viewBothActiveAndInactive : false,\n    weGot200 : false\n    // accountCode : '',\n    // password : ''\n   }\n  }\n\n  componentDidMount() {\n     this._isMounted = true;\n     const VIP = localStorage.getItem('alreadyHere')\n     console.log(VIP)\n     if (  VIP ) {\n      console.log('went thru...',VIP)\n      // this.setState({ weGot200 : true})\n\n     }\n  }\n\n\n    componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n\n  getGettingStartedData(e){\n    // console.log(`${e.target.name}, : ${e.target.value}`)\n    // const {accountCode, password} this.state\n    const handle = e.target.name\n    const handleValue = e.target.value\n    console.log( handle,':',handleValue)\n    this.setState({ [handle] : handleValue })\n    // console.log(e.target.name, )\n\n  }\n\n\n  async letsGetStarted(e){\n    e.preventDefault()\n    const validate = (v) =>  v === '' || v === undefined ? false : true \n\n      // if (v === '' || v === undefined) {\n      //   // console.log('Your params are weak bruh')\n      //   return false\n      // }else{\n      //   return true\n\n      // }\n      \n    \n    const {accountCode, passWord} = this.state\n    // console.log(validate(accountCode) === validate(passWord), validate(accountCode), validate(passWord))\n    if ( validate(accountCode) && validate(passWord)) {\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n      const bodyData = {\n        'account' : accountCode,\n        'hashed' : passWord\n      }\n\n      const makeRequest = await fetch('/assets', {\n          method: 'POST',\n          body: JSON.stringify(bodyData),\n          headers: {'Content-Type': 'application/json'}\n      })\n\n      const getInitialData = await makeRequest.json()\n      console.log(makeRequest.status)\n      if ( makeRequest.status === 200 && !getInitialData.error) {//this._isMounted\n        console.log(getInitialData)\n        this.setState({ weGot200 : true, assets : getInitialData})\n        \n      }else {\n        console.log('ERROR:',getInitialData)\n      }\n      // console.log('Making initial call with ....', accountCode, passWord)\n    }else {\n      console.log('the form is empty...')\n      // console.log(`Account : ${accountCode}  password ${passWord}`)\n    }\n  }\n\n  \n  render() {\n    const {assets, accountCode, passWord, weGot200 } = this.state\n    // const assetListLenghth = assets.length\n    // const activeAssetsList = assets.filter( asset=> asset.status == '1')\n    console.log(`Is it 200? ${weGot200}`)\n    console.log(this)\n\n\n    // if ( weGot200 ) {\n    //   return(\n    //       <div className='App'>\n    //         <AppContainer data={{'account': accountCode, 'pass':passWord }}/>\n    //       </div>\n    //   )} \n\n    return (\n      <div className='App'>\n        { weGot200 && <AppContainer data={{'account': accountCode, 'hashed':passWord, 'assetdata': assets }}/>}\n        { !weGot200 && <SignInFirst getFormData={(e)=>this.getGettingStartedData(e)} letsGetStarted={(e)=>this.letsGetStarted(e)}/>}\n      </div>\n  )}\n}\n"]},"metadata":{},"sourceType":"module"}