{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/frontend/src/components/asset-content/mani/location/location.js\";\nimport React, { Component } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport './location.css';\nexport default class Location extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.gpsdataresponse = () => {\n      const {\n        gpsData,\n        isGPSLoading,\n        isParamEmpty\n      } = this.state;\n      const gpsList = [{\n        'name': 'ASSET DBID',\n        'id': 'assetdbid'\n      }, {\n        'name': 'FIRMWARE',\n        'id': 'firmware'\n      }, {\n        'name': 'LAST PHONE HOME',\n        'id': 'lastcallhome'\n      }, {\n        'name': 'LAST INSP DATE',\n        'id': 'lastinspectiondate'\n      }, {\n        'name': 'LAST POSITION DATE',\n        'id': 'lastpositiondate'\n      }, {\n        'name': 'SIM CARD',\n        'id': 'scid'\n      }]; // console.log('functin working')\n\n      if (gpsData[0] === undefined) {\n        // console.log('No gps data')\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isGPSLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n              style: {\n                height: 80\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n              style: {\n                height: 30\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n              style: {\n                height: 30\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 9\n          }, this), !isGPSLoading && isParamEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              align: \"center\",\n              children: \"No gps data \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              align: \"right\",\n              onClick: () => this.fetchGpsData(),\n              color: \"primary\",\n              children: \"Get gps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }, this);\n      } else {\n        const getGPSDATA = gpsData[0]; // console.log(getGPSDATA,getGPSDATA[0])\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"subtitle1\",\n                children: \"GPS ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h6\",\n                children: getGPSDATA['gpsid']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 16\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 8\n          }, this), gpsList.map(i => {\n            // console.log('its working')\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"gps-grid-container\",\n              container: true,\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textSecondary\",\n                  variant: \"body2\",\n                  children: i.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textSecondary\",\n                  variant: \"body2\",\n                  children: getGPSDATA[i.id] === null || getGPSDATA[i.id] === '' ? '-' : getGPSDATA[i.id]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 8\n              }, this)]\n            }, i.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 7\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => this.fetchGpsData(),\n              color: \"primary\",\n              children: \"Get GPS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }, this);\n      }\n    };\n\n    this.state = {\n      locationDetails: [],\n      data: this.props.data,\n      isComponentMounted: true,\n      isLocationLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.fetchManiData();\n    this.setState({\n      isComponentMounted: true\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    console.log('Location COMPONENT UNMOUNTED');\n    this.setState({\n      isComponentMounted: false\n    });\n  }\n\n  async fetchManiData() {\n    console.log('fetching location...');\n    this.setState({\n      locationDetails: []\n    });\n    const {\n      data: {\n        id = null,\n        gpsid = null,\n        account,\n        hashed\n      },\n      isComponentMounted\n    } = this.state;\n    console.log('State Cleared!...........', isComponentMounted);\n\n    if (!isComponentMounted || gpsid === null) {\n      // console.log(` Location :- Either Component unmounted or gps null mouted?==>${isComponentMounted} gps==> ${gpsid}`)\n      this.setState({\n        isLocationLoading: false\n      });\n      return;\n    } else {\n      console.log('L :- setting state of Loading to TRUE ');\n      this.setState({\n        isLocationLoading: true\n      });\n      let bodyData = {\n        'params': {\n          'id': id,\n          'gpsid': gpsid,\n          'account': account,\n          'hashed': hashed\n        }\n      };\n      const makeRequest = await fetch('/location', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // console.log('End',makeRequest)\n\n      const getLocationData = await makeRequest.json();\n      console.log('Done making request', getLocationData, isComponentMounted);\n\n      if (makeRequest.status === 200 && this._isMounted) {\n        if (getLocationData.error) {\n          console.log('Error in server ', getLocationData.error);\n          this.setState({\n            isLocationLoading: false\n          });\n        } else {\n          if (getLocationData && isComponentMounted && this._isMounted) {\n            console.log('Location on the way!');\n            this.setState({\n              locationDetails: getLocationData.locationresponse,\n              isLocationLoading: false\n            }); // console.log(getLocationData)\n          } else {\n            // this.setState({pathexists : false})\n            console.log('Error AFTER 200 status on fetch');\n          }\n        }\n      } else {\n        console.log(`Error AFTER 200 status on fetch or Component is unmounted... COMP mounted?==>${this._isMounted}`); // this.setSate({gettingMani: false})\n\n        return;\n      }\n    }\n\n    return 'Done';\n  }\n\n  render() {\n    const {\n      locationDetails,\n      isLocationLoading\n    } = this.state;\n\n    const functionn = () => this.fetchManiData();\n\n    console.log('LOCATION:', this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [isLocationLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Loading..... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 28\n      }, this), !isLocationLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"subtitle1\",\n              children: \"LOCATION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 7\n        }, this), locationDetails.power === 'on' ? /*#__PURE__*/_jsxDEV(Chip, {\n          className: \"chip-on\",\n          label: \"On\",\n          onClick: functionn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 41\n        }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n          className: \"chip-off\",\n          label: \"Off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 103\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/frontend/src/components/asset-content/mani/location/location.js"],"names":["React","Component","Chip","Grid","Typography","Location","constructor","props","_isMounted","gpsdataresponse","gpsData","isGPSLoading","isParamEmpty","state","gpsList","undefined","height","fetchGpsData","getGPSDATA","map","i","name","id","locationDetails","data","isComponentMounted","isLocationLoading","componentDidMount","fetchManiData","setState","componentWillUnmount","console","log","gpsid","account","hashed","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getLocationData","json","status","error","locationresponse","render","functionn","power"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport './location.css';\n\n\nexport default class Location extends Component{\n\t_isMounted = false;\n\tconstructor (props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tlocationDetails : [],\n\t\t\tdata : this.props.data,\n\t\t\tisComponentMounted : true,\n\t\t\tisLocationLoading : true\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis._isMounted = true;\n\t\tthis.fetchManiData()\n\t\tthis.setState({isComponentMounted : true})\n\t}\n\n\n\tcomponentWillUnmount(){\n\t\tthis._isMounted = false;\n\t\tconsole.log('Location COMPONENT UNMOUNTED')\n\t\tthis.setState({isComponentMounted : false})\n    }\n\n  \tasync fetchManiData() {\n\n\t\tconsole.log('fetching location...')\n\t\tthis.setState({locationDetails : []})\n\t\tconst { data : { id=null, gpsid=null, account, hashed }, isComponentMounted} = this.state\n\n\n\t\tconsole.log('State Cleared!...........',isComponentMounted)\n\t\t\n\n\t\tif (!isComponentMounted || gpsid === null){\n\t\t\t// console.log(` Location :- Either Component unmounted or gps null mouted?==>${isComponentMounted} gps==> ${gpsid}`)\n\t\t\tthis.setState({isLocationLoading: false})\n\t\t\treturn;\n\t\t}else{\n\t\t\tconsole.log('L :- setting state of Loading to TRUE ')\n\t\t\tthis.setState({isLocationLoading : true})\n\t\t\tlet bodyData = {\n\t\t\t'params': {\n\t\t\t\t'id': id,\n\t\t\t\t'gpsid': gpsid,\n\t\t\t\t'account':account,\n\t\t\t\t'hashed':hashed\n\t\t\t\t}}\n\t\t\tconst makeRequest = await fetch('/location', {\n\t\t        method: 'POST',\n\t\t        body: JSON.stringify(bodyData),\n\t\t        headers: {'Content-Type': 'application/json'}\n\t\t    })\n\t\t    // console.log('End',makeRequest)\n\t\t\tconst getLocationData = await makeRequest.json()\n\t\t\tconsole.log('Done making request',getLocationData, isComponentMounted)\n\n\n\t\t\tif (makeRequest.status === 200 && this._isMounted ) {\n\t\t\t\tif (getLocationData.error) {\n\t\t\t\t\tconsole.log('Error in server ',getLocationData.error )\n\t\t\t\t\tthis.setState({isLocationLoading : false})\n\t\t\t\t}else{\n\t\t\t\t\tif (getLocationData && isComponentMounted && this._isMounted) {\n\t\t\t\t\t\tconsole.log('Location on the way!')\n\t\t\t\t\t\tthis.setState({locationDetails : getLocationData.locationresponse, isLocationLoading : false})\n\t\t\t\t\t\t// console.log(getLocationData)\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// this.setState({pathexists : false})\n\t\t\t\t\t\tconsole.log('Error AFTER 200 status on fetch')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tconsole.log(`Error AFTER 200 status on fetch or Component is unmounted... COMP mounted?==>${this._isMounted}`)\n\t\t\t\t// this.setSate({gettingMani: false})\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\treturn 'Done'\n\t}\n\n\n\tgpsdataresponse = ()=>{\n\t\tconst {gpsData, isGPSLoading, isParamEmpty} = this.state\n  \t\tconst gpsList =  [\n\t  \t\t{\n\t  \t\t\t'name':'ASSET DBID',\n\t\t\t\t'id':'assetdbid'\n\t\t\t}, {\n\t\t\t\t'name':'FIRMWARE',\n\t\t\t\t'id':'firmware'\n\t\t\t},{\n\t  \t\t\t'name': 'LAST PHONE HOME',\n\t  \t\t\t'id': 'lastcallhome'\n\t  \t\t},{\n\t  \t\t\t'name': 'LAST INSP DATE',\n\t  \t\t\t'id': 'lastinspectiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'LAST POSITION DATE',\n\t  \t\t\t'id': 'lastpositiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'SIM CARD',\n\t  \t\t\t'id': 'scid'\n\t  \t\t}\n  \t\t]\n  \t\t// console.log('functin working')\n\n\n  \t\tif (gpsData[0] === undefined) {\n  \t\t\t// console.log('No gps data')\n  \t\t\treturn(\n  \t\t\t\t<div>\n  \t\t\t\t\t{ isGPSLoading &&\n  \t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Skeleton style={{ height:80 }}/>\n\t\t\t\t\t\t\t<Skeleton style={{ height:30 }}/>\n\t\t\t\t\t\t\t<Skeleton style={{ height:30 }}/>\n\t\t\t\t\t\t\t<Skeleton />\n  \t\t\t\t\t\t</div> \n  \t\t\t\t\t}\n\t  \t\t\t\t{ !isGPSLoading && isParamEmpty &&\n\t  \t\t\t\t\t<div>\n\t\t  \t\t\t\t\t<Typography align='center'>No gps data </Typography>\n\t\t  \t\t\t\t\t<Button align='right' onClick={()=> this.fetchGpsData()} color=\"primary\">Get gps</Button>\n\t  \t\t\t\t\t</div>\n\t  \t\t\t\t}\n  \t\t\t\t</div>\n  \t\t\t\t)\n  \t\t}else{\n  \t\t\tconst getGPSDATA = gpsData[0]\n  \t\t\t// console.log(getGPSDATA,getGPSDATA[0])\n  \t\t\treturn (\n  \t\t\t\t<div>\n\t  \t\t\t\t<Grid container alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t<Typography gutterBottom variant=\"subtitle1\">\n\t\t\t\t\t\t\t\tGPS ID\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t        <Grid item>\n\t\t\t            <Typography gutterBottom variant=\"h6\">\n\t\t\t              {getGPSDATA['gpsid']}\n\t\t\t            </Typography>\n\t\t\t        </Grid>\n\t\t\t\t     <br/>\n\n\t\t\t\t    </Grid>\n\t  \t\t\t\t{gpsList.map(i=>{\n\t  \t\t\t\t// console.log('its working')\n\t  \t\t\t\treturn(\n\t\t\t\t\t\t<Grid className='gps-grid-container' key={i.id} container alignItems=\"center\">\n\t\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t\t  \t{i.name}\n\t\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t\t</Grid>\t\t\t          \n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t\t  \t{getGPSDATA[i.id] === null || getGPSDATA[i.id] === '' ? '-' : getGPSDATA[i.id]}\n\t\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t  \t\t\t \t)\n\t  \t\t\t})}\n\t  \t\t\t  <div className=''>\n\t\t\t        <Button onClick={()=> this.fetchGpsData()} color=\"primary\">Get GPS</Button>\n\t\t\t      </div>\n  \t\t\t\t</div>\n  \t\t\t)\n  \t\t}\n  \t}\n\n\n\trender(){\n\n\t\tconst {locationDetails, isLocationLoading} = this.state\n\t\tconst functionn = ()=> this.fetchManiData()\n\t\tconsole.log('LOCATION:',this)\n\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{ isLocationLoading && <span> Loading..... </span> }\n\t\t\t\t{!isLocationLoading &&\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Grid container alignItems=\"center\">\n\t\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t\t<Typography gutterBottom variant=\"subtitle1\">\n\t\t\t\t\t\t\t\t\tLOCATION\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t       \t\t\t<Grid item>\n\t\t\t            <Typography gutterBottom variant=\"h6\">\n\t\t\t              \n\t\t\t            </Typography>\n\t\t\t        </Grid>\n\t\t\t\t     <br/>\n\t\t\t\t    </Grid> \n\n\t\t\t\t\t\t{locationDetails.power === 'on' ? <Chip className='chip-on' label='On' onClick={functionn} /> : <Chip className='chip-off' label='Off'/> }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)}\n}"]},"metadata":{},"sourceType":"module"}