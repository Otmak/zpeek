{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/gps/gps.js\";\nimport React, { Component } from 'react';\nimport './gps.css';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nexport default class GPS extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gpsdataresponse = () => {\n      const {\n        gpsData\n      } = this.state;\n      const gpsList = [{\n        'name': 'Asset DB ID',\n        'id': 'assetdbid'\n      }, {\n        'name': 'Firmware',\n        'id': 'firmware'\n      }, {\n        'name': 'Gps DB ID',\n        'id': 'gpsdbid'\n      }, {\n        'name': 'Last Phone Home',\n        'id': 'lastcallhome'\n      }, {\n        'name': 'Last Inspection Date',\n        'id': 'lastinspectiondate'\n      }, {\n        'name': 'Last Position Date',\n        'id': 'lastpositiondate'\n      }, {\n        'name': 'Sim Card Number',\n        'id': 'scid'\n      }]; // console.log('functin working')\n\n      if (gpsData[0] === undefined) {\n        // console.log('No gps data')\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          children: \"No gps data \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this);\n      } else {\n        const getGPSDATA = gpsData[0]; // console.log(getGPSDATA,getGPSDATA[0])\n\n        return /*#__PURE__*/_jsxDEV(Paper, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"subtitle1\",\n                children: \"GPS ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h6\",\n                children: getGPSDATA['gpsid']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 16\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 8\n          }, this), gpsList.map(i => {\n            // console.log('its working')\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"gps-grid-container\",\n              container: true,\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textSecondary\",\n                  variant: \"body2\",\n                  children: i.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"textSecondary\",\n                  variant: \"body2\",\n                  children: getGPSDATA[i.id] === null || getGPSDATA[i.id] === '' ? '-' : getGPSDATA[i.id]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 8\n              }, this)]\n            }, i.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 7\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }, this);\n      }\n    };\n\n    this.state = {\n      data: this.props.data,\n      gpsData: [],\n      gpsLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchManiData();\n  }\n\n  async fetchManiData() {\n    console.log('fetching MANI');\n    const {\n      data: {\n        id = null,\n        gpsid = null\n      }\n    } = this.state;\n\n    if (gpsid === null) {\n      console.log('This asset has no GPSID');\n      this.setState({\n        gpsLoading: false\n      });\n    } else {\n      let bodyData = {\n        'params': {\n          'id': id,\n          'gpsid': gpsid\n        }\n      };\n      const makeRequest = await fetch('/gpsunit', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // console.log('Status',makeRequest)\n\n      const getGpsData = await makeRequest.json(); // console.log(getManiData)\n\n      if (makeRequest.status === 200) {\n        if (getGpsData.error) {\n          console.log('Error in server bud');\n          this.setState({\n            gpsLoading: false\n          });\n        } else {\n          // console.log(getGpsData)\n          this.setState({\n            gpsData: getGpsData.gpsdata\n          });\n        }\n      } else {\n        this.setSate({\n          gpsLoading: false\n        });\n      }\n    }\n\n    return 'Done';\n  }\n\n  render() {\n    // const {gpsData} = this.state\n    console.log(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.gpsdataresponse()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 3\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/gps/gps.js"],"names":["React","Component","Paper","Chip","Button","Grid","Typography","GPS","constructor","props","gpsdataresponse","gpsData","state","gpsList","undefined","getGPSDATA","map","i","name","id","data","gpsLoading","componentDidMount","fetchManiData","console","log","gpsid","setState","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getGpsData","json","status","error","gpsdata","setSate","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './gps.css';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default class GPS extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      data : this.props.data,\n      gpsData : [],\n      gpsLoading : true\n    }\n  }\n\n  componentDidMount(){\n  \tthis.fetchManiData()\n  }\n\n  async fetchManiData() {\n\tconsole.log('fetching MANI')\n\tconst { data : { id=null, gpsid=null }} = this.state\n\n\tif (gpsid === null){\n\t\tconsole.log('This asset has no GPSID')\n\t\tthis.setState({gpsLoading: false})\n\t}else{\n\t\tlet bodyData = {\n\t\t'params': {\n\t\t\t'id': id,\n\t\t\t'gpsid': gpsid\n\t\t\t}}\n\t\tconst makeRequest = await fetch('/gpsunit', {\n\t        method: 'POST',\n\t        body: JSON.stringify(bodyData),\n\t        headers: {'Content-Type': 'application/json'}\n\t    })\n\n\t    // console.log('Status',makeRequest)\n\t\tconst getGpsData = await makeRequest.json()\n\t\t// console.log(getManiData)\n\n\t\tif (makeRequest.status === 200) {\n\t\t\tif (getGpsData.error) {\n\t\t\t\tconsole.log('Error in server bud')\n\t\t\t\tthis.setState({gpsLoading : false})\n\t\t\t}else{\n\t\t\t\t// console.log(getGpsData)\n\t\t\t\tthis.setState({gpsData : getGpsData.gpsdata})\n\t\t\t}\n\t\t}else{\n\t\t\tthis.setSate({gpsLoading: false})\n\t\t}\n\t}\n\treturn 'Done'\n\t}\n\n\tgpsdataresponse = ()=>{\n\t\tconst {gpsData} = this.state\n  \t\tconst gpsList =  [\n\t  \t\t{\n\t  \t\t\t'name':'Asset DB ID',\n\t\t\t\t'id':'assetdbid'\n\t\t\t}, {\n\t\t\t\t'name':'Firmware',\n\t\t\t\t'id':'firmware'\n\t\t\t}, {\n\t\t\t\t'name':'Gps DB ID',\n\t\t\t\t'id':'gpsdbid'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Phone Home',\n\t  \t\t\t'id': 'lastcallhome'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Inspection Date',\n\t  \t\t\t'id': 'lastinspectiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Position Date',\n\t  \t\t\t'id': 'lastpositiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'Sim Card Number',\n\t  \t\t\t'id': 'scid'\n\t  \t\t}\n  \t\t]\n  \t\t// console.log('functin working')\n\n\n  \t\tif (gpsData[0] === undefined) {\n  \t\t\t// console.log('No gps data')\n  \t\t\treturn(<Typography align='center'>No gps data </Typography>)\n  \t\t}else{\n  \t\t\tconst getGPSDATA = gpsData[0]\n  \t\t\t// console.log(getGPSDATA,getGPSDATA[0])\n  \t\t\treturn (\n  \t\t\t\t<Paper>\n\t  \t\t\t\t<Grid container alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t<Typography gutterBottom variant=\"subtitle1\">\n\t\t\t\t\t\t\t\tGPS ID\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t        <Grid item>\n\t\t\t            <Typography gutterBottom variant=\"h6\">\n\t\t\t              {getGPSDATA['gpsid']}\n\t\t\t            </Typography>\n\t\t\t        </Grid>\n\t\t\t\t     <br/>\n\n\t\t\t\t    </Grid>\n\t  \t\t\t\t{gpsList.map(i=>{\n\t  \t\t\t\t// console.log('its working')\n\t  \t\t\t\treturn(\n\t\t\t\t\t\t<Grid className='gps-grid-container' key={i.id} container alignItems=\"center\">\n\t\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t\t  \t{i.name}\n\t\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t\t</Grid>\t\t\t          \n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t\t  \t{getGPSDATA[i.id] === null || getGPSDATA[i.id] === '' ? '-' : getGPSDATA[i.id]}\n\t\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t  \t\t\t \t)\n\t  \t\t\t})}\n  \t\t\t\t</Paper>\n  \t\t\t)\n  \t\t}\n  \t}\n\n  render(){\n  \t// const {gpsData} = this.state\n  \tconsole.log(this)\n\n\treturn (\n\t\t<div>\n\t\t\t{this.gpsdataresponse()}\n\t\t</div>\n\t  );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}