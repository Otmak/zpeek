{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/gps/gps.js\";\nimport React, { Component } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nexport default class GPS extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gpsdataresponse = () => {\n      const {\n        gpsData\n      } = this.state;\n      const gpsList = [{\n        'name': 'Asset DB ID',\n        'id': 'assetdbid'\n      }, {\n        'name': 'Firmware',\n        'id': 'firmware'\n      }, {\n        'name': 'Gps DB ID',\n        'id': 'gpsdbid'\n      }, {\n        'name': 'GpsID',\n        'id': 'gpsid'\n      }, {\n        'name': 'Last Phone Home',\n        'id': 'lastcallhome'\n      }, {\n        'name': 'Last Inspection Date',\n        'id': 'lastinspectiondate'\n      }, {\n        'name': 'Last Position Date',\n        'id': 'lastpositiondate'\n      }, {\n        'name': 'Sim Card Number',\n        'id': 'scid'\n      }];\n\n      if (gpsData === undefined) {\n        console.log('No data');\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          children: \"No GPS Data \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this);\n      } else {\n        gpsList.map(i => {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                variant: \"body2\",\n                children: i.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                variant: \"body2\",\n                children: gpsData[i.id]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 6\n          }, this);\n        });\n      }\n    };\n\n    this.state = {\n      data: this.props.data,\n      gpsData: [],\n      gpsLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchManiData();\n  }\n\n  async fetchManiData() {\n    console.log('fetching MANI');\n    const {\n      data: {\n        id = null,\n        gpsid = null\n      }\n    } = this.state;\n\n    if (gpsid === null) {\n      console.log('This asset has no GPSID');\n      this.setState({\n        gpsLoading: false\n      });\n    } else {\n      let bodyData = {\n        'params': {\n          'id': id,\n          'gpsid': gpsid\n        }\n      };\n      const makeRequest = await fetch('/gpsunit', {\n        method: 'POST',\n        body: JSON.stringify(bodyData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Status', makeRequest);\n      const getGpsData = await makeRequest.json(); // console.log(getManiData)\n\n      if (makeRequest.status === 200) {\n        if (getGpsData.error) {\n          console.log('Error in server bud');\n          this.setState({\n            gpsLoading: false\n          });\n        } else {\n          if (getGpsData) {\n            this.setState({\n              gpsData: getGpsData.gpsdata\n            });\n            console.log(getGpsData);\n          } else {\n            // this.setState({pathexists : false})\n            console.log('Error AFTER 200 status on fetch');\n          }\n        }\n      } else {\n        this.setSate({\n          gettingMani: false\n        });\n      }\n    }\n\n    return 'Done';\n  }\n\n  render() {\n    // const {gpsData} = this.state\n    console.log(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: () => this.gpsdataresponse()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 3\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/othome/Desktop/projects/zonar/zpeek/src/components/asset-content/mani/gps/gps.js"],"names":["React","Component","Chip","Button","Grid","Typography","GPS","constructor","props","gpsdataresponse","gpsData","state","gpsList","undefined","console","log","map","i","name","id","data","gpsLoading","componentDidMount","fetchManiData","gpsid","setState","bodyData","makeRequest","fetch","method","body","JSON","stringify","headers","getGpsData","json","status","error","gpsdata","setSate","gettingMani","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default class GPS extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      data : this.props.data,\n      gpsData : [],\n      gpsLoading : true\n    }\n  }\n\n  componentDidMount(){\n  \tthis.fetchManiData()\n  }\n\n  async fetchManiData() {\n\tconsole.log('fetching MANI')\n\tconst { data : { id=null, gpsid=null }} = this.state\n\n\tif (gpsid === null){\n\t\tconsole.log('This asset has no GPSID')\n\t\tthis.setState({gpsLoading: false})\n\t}else{\n\t\tlet bodyData = {\n\t\t'params': {\n\t\t\t'id': id,\n\t\t\t'gpsid': gpsid\n\t\t\t}}\n\t\tconst makeRequest = await fetch('/gpsunit', {\n\t        method: 'POST',\n\t        body: JSON.stringify(bodyData),\n\t        headers: {'Content-Type': 'application/json'}\n\t    })\n\n\t    console.log('Status',makeRequest)\n\t\tconst getGpsData = await makeRequest.json()\n\t\t// console.log(getManiData)\n\n\t\tif (makeRequest.status === 200) {\n\t\t\tif (getGpsData.error) {\n\t\t\t\tconsole.log('Error in server bud')\n\t\t\t\tthis.setState({gpsLoading : false})\n\t\t\t}else{\n\t\t\t\tif (getGpsData) {\n\t\t\t\t\tthis.setState({gpsData : getGpsData.gpsdata})\n\t\t\t\t\tconsole.log(getGpsData)\n\t\t\t\t}else{\n\t\t\t\t\t// this.setState({pathexists : false})\n\t\t\t\t\tconsole.log('Error AFTER 200 status on fetch')\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tthis.setSate({gettingMani: false})\n\t\t}\n\t}\n\treturn 'Done'\n\t}\n\n\tgpsdataresponse = ()=>{\n\t\tconst {gpsData} = this.state\n  \t\tconst gpsList =  [\n\t  \t\t{\n\t  \t\t\t'name':'Asset DB ID',\n\t\t\t\t'id':'assetdbid'\n\t\t\t}, {\n\t\t\t\t'name':'Firmware',\n\t\t\t\t'id':'firmware'\n\t\t\t}, {\n\t\t\t\t'name':'Gps DB ID',\n\t\t\t\t'id':'gpsdbid'\n\t  \t\t},{\n\t  \t\t\t'name': 'GpsID',\n\t  \t\t\t'id': 'gpsid'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Phone Home',\n\t  \t\t\t'id': 'lastcallhome'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Inspection Date',\n\t  \t\t\t'id': 'lastinspectiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'Last Position Date',\n\t  \t\t\t'id': 'lastpositiondate'\n\t  \t\t},{\n\t  \t\t\t'name': 'Sim Card Number',\n\t  \t\t\t'id': 'scid'\n\t  \t\t}\n  \t\t]\n\n  \t\tif (gpsData === undefined) {\n  \t\t\tconsole.log('No data')\n  \t\t\treturn(<Typography align='center'>No GPS Data </Typography>)\n  \t\t}else{\n  \t\t\tgpsList.map(i=>{\n  \t\t\t\treturn(\n\t\t\t\t\t<Grid container alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t  \t{i.name}\n\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t</Grid>\t\t\t          \n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t  <Typography color=\"textSecondary\" variant=\"body2\">\n\t\t\t\t\t\t  \t{gpsData[i.id]}\n\t\t\t\t\t\t  </Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n  \t\t\t  \t)\n  \t\t\t})\n  \t\t}\n  \t}\n\n\n  render(){\n  \t// const {gpsData} = this.state\n  \tconsole.log(this)\n\n\n\treturn (\n\t\t<div>\n\t\t\t{()=>this.gpsdataresponse()}\n\t\t</div>\n\t  );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}